//  Import flutter packages.
import 'dart:math' as math;
import 'package:flutter/material.dart';

// Import project-specific files.
import 'package:kar_kam/lib/rect_extension.dart';

/// [SettingsPageListTileClipper] calculates the path to clip against when
/// constructing [SettinsgPageListTile].
///
/// The path generated by [SettingsPageListTileClipper] is calculated from
/// an instance of RRect that has been shortened horizontally in order to
/// account for the presence of guestRect.
class SettingsPageListTileClipper extends CustomClipper<Path> {
  const SettingsPageListTileClipper({
    required this.context,
    required this.guestRect,
    Listenable? reclip,
  }) : super(reclip: reclip);

  /// [guestRect] is the Rect which [SettingsPageListTileClipper] creates
  /// a path to avoid.
  final Rect? guestRect;

  //  Required on order to find the current renderBox.
  final BuildContext context;

  /// Getter for [centralLocalConstructionRect].
  Rect get centralLocalConstructionRect {
    //  [centralLocalConstructionRect] is built from [localGuestRect].
    Rect localGuestRect = getLocalGuestRect();

    Rect centralLocalConstructionRect = localGuestRect.inflateToHeight(
        math.max(0.0, localGuestRect.height - localGuestRect.shortestSide));
    // print(localGuestRect);
    // print(localGuestRect.height - localGuestRect.shortestSide);
    // print(centralLocalConstructionRect);
    return centralLocalConstructionRect;
  }

  /// Getter for [localGuestRect].
  Rect get localGuestRect {
    //  Get [renderBox] associated with [SettingsPageListTileClipper].
    //  (Used to generate guestRect and localGuestRect.)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Transform guestRect from the global coordinate system relative to the
    //  top left screen corner to a system local to [renderBox], which
    //  represents the current local instance of ListTile.
    return guestRect!.shift(offset);
  }

  /// Getter for [lowerLocalConstructionRect].
  Rect get lowerLocalConstructionRect {
    //  [lowerLocalConstructionRect] is built from [localGuestRect].
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 6.0;
    Rect rect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return rect.shift(Offset(0.0, dy));
  }

  /// Getter for [upperLocalConstructionRect]
  Rect get upperLocalConstructionRect {
    //  [upperLocalConstructionRect] is built from [localGuestRect].
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 6.0;
    Rect rect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return rect.shift(Offset(0.0, -dy));
  }

  @override
  Path getClip(Size size) {
    //  Construct [hostRect] (in this instance the Rect associated with
    //  [SettingsPageListTile] in a coordinate system local to itself).
    Rect hostRect = getHostRect(size);
    // print('getClip, hostRect = $hostRect');
    // print('getClip, localGuestRect = $localGuestRect');

    //  Set initial value of deltaX to width of localGuestRect. Use getDeltaX
    //  immediately below to modify this value if the conditions are correct.
    double deltaX = 0.0;

    //  Modify deltaX if conditions are correct.
    if (upperLocalConstructionRect.boundsContain(hostRect.bottomLeft) ||
        upperLocalConstructionRect.boundsContain(hostRect.bottomRight)) {
      //  Bottom of hostRect lies within upperLocalConstructionRect.
      // deltaX =  getDeltaX(hostRect.bottom);
    } else if (lowerLocalConstructionRect.boundsContain(hostRect.topLeft) ||
        lowerLocalConstructionRect.boundsContain(hostRect.topRight)) {
      //  Top of hostRect lies within lowerLocalConstructionRect
      // deltaX =  getDeltaX(hostRect.top);
    } else if (centralLocalConstructionRect.boundsContain(hostRect.bottomLeft) ||
        centralLocalConstructionRect.boundsContain(hostRect.bottomRight) ||
        centralLocalConstructionRect.boundsContain(hostRect.topLeft) ||
        centralLocalConstructionRect.boundsContain(hostRect.topRight)) {
      //  Bottom OR top of hostRect lies within upperLocalConstructionRect
      deltaX = localGuestRect.width;
      // print('getClip, hostRect = $hostRect');
      // print('getClip, guestRect = $guestRect');
      // print('getClip, localGuestRect = $localGuestRect');
      // print('getClip, centralLocalConstructionRect = $centralLocalConstructionRect');
    }
    // Calculate [relativeOffset] to determine whether to clip left ot right.
    Offset relativeOffset = localGuestRect.center - hostRect.center;

    //  Generate a Path variable representing the boundary of hostRect.
    Path hostPath = Path();
    if (relativeOffset.dx >= 0) {
      //  localGuestRect is to the right of hostRect.
      // hostPath
      //   ..addRRect(RRect.fromRectAndRadius(
      //       Rect.fromLTRB(hostRect.left, hostRect.top, hostRect.right - deltaX,
      //           hostRect.bottom),
      //       Radius.circular(15.0)));
      hostPath
        ..addRRect(RRect.fromLTRBR(hostRect.left, hostRect.top, hostRect.right - deltaX, hostRect.bottom, Radius.circular(25.0)));
    } else if (relativeOffset.dx < 0) {
      //  localGuestRect is to the left of hostRect.
      // hostPath
      //   ..addRRect(RRect.fromRectAndRadius(
      //       Rect.fromLTRB(hostRect.left + deltaX, hostRect.top, hostRect.right,
      //           hostRect.bottom),
      //       Radius.circular(15.0)));
      hostPath
        ..addRRect(RRect.fromLTRBR(hostRect.left + deltaX, hostRect.top, hostRect.right, hostRect.bottom, Radius.circular(25.0)));
    }
    return hostPath;
  }

  double getDeltaX(double y) {
    //  Convert guestRect, provided as input to [SettingsPageListTileClipper],
    //  from global coordinates to a coordinate system local to current
    //  instance of [SettingsPageListTile].
    Rect localGuestRect = getLocalGuestRect();

    //  Need to detemine which y-value to pass to getDeltaX. Choose y-value
    //  of top or bottom edge of hostRect depending on whether hostRect.center
    //  below or above localGuestRect.center.

    // print('localGuestRect = $localGuestRect');
    // print('localGuestRect.center = ${localGuestRect.center}');
    // print('upperLocalConstructionRect = $upperLocalConstructionRect');
    // print('centralLocalConstructionRect.center = ${centralLocalConstructionRect.center}');
    // print('lowerLocalConstructionRect = $lowerLocalConstructionRect');
    return 50;
  }

  /// [getHostRect] converts size associated with the current instance
  /// od [SettingsPageListTile] to Rect.
  Rect getHostRect(Size hostSize) => Offset(0.0, 0.0) & hostSize;

  Rect getLocalGuestRect() {
    //  Get [renderBox] associated with [SettingsPageListTileClipper].
    //  (Used to generate guestRect and localGuestRect.)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Transform guestRect from the global coordinate system relative to the
    //  top left screen corner to a system local to [renderBox], which
    //  represents the current local instance of ListTile.
    return guestRect!.shift(offset);
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) {
    return true;
  }
}
