//  Import flutter packages.
import 'package:flutter/material.dart';

/// [SettingsPageListTileClipper] calculates the path to clip against when
/// constructing [SettinsgPageListTile].
///
/// The path generated by [SettingsPageListTileClipper] is calculated from
/// an instance of RRect that has been shortened horizontally in order to
/// account for the presence of guestRect.
class SettingsPageListTileClipper extends CustomClipper<Path> {
  const SettingsPageListTileClipper({
    required this.context,
    required this.guestRect,
    Listenable? reclip,
  }) : super(reclip: reclip);

  /// [guestRect] is the Rect which [SettingsPageListTileClipper] creates
  /// a path to avoid.
  final Rect? guestRect;

  //  Required on order to find the current renderBox.
  final BuildContext context;

  @override
  Path getClip(Size size) {
    //  Construct [hostRect] (in this instance the Rect associated with
    //  [SettingsPageListTile] in a coordinate system local to itself).
    Rect hostRect = getHostRect(size);
    //
    //  Convert guestRect from global coordinates to a coordinate system
    //  local to current instance of [SettingsPageListTile].
    Rect localGuestrect = getLocalGuestRect(size);

    double? deltax;
    print('hostRect.center.dy = ${hostRect.center.dy}');
    print('localGuestrect.center.dy = ${localGuestrect.center.dy}');
    if (hostRect.center.dy - localGuestrect.center.dy <= 0) {
      Rect upperConstructionRect = getUpperConstructionRect(localGuestrect);
      // deltax = getDeltax(hostRect.bottom, upperConstructionRect);
      print('upperConstructionRect = $upperConstructionRect');
    } else {
      Rect lowerConstructionRect = getLowerConstructionRect(localGuestrect);
      // deltax = getDeltax(hostRect.top, lowerConstructionRect);
      print('lowerConstructionRect = $lowerConstructionRect');
    }

    //  Get [renderBox] associated with SettingsPageListTileClipper.
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get global offset associated with the top left corner of
    //  [SettingsPageListTileClipper] relative to top left corner of screen.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Convert guestRect from global coordinate system to a system local to
    //  [renderBox], which represents the current local instance of ListTile,
    //  by using a simple translation.
    Rect localGuestRect = guestRect!.shift(offset);

    //  Generate a Path variable representing the boundary of hostRect.
    Path hostPath = Path();
    hostPath..addRRect(
        RRect.fromRectAndRadius(Offset(0.0, 0.0) & size, Radius.circular(25)));

    //  Generate a Path variable representing the boundary of guestRect.
    Path guestPath = Path();
    guestPath..addRRect(
        RRect.fromRectAndRadius(localGuestRect, Radius.circular(15)));

    //  Create the clipPath by subtracting guestPath from hostPath.
    return Path.combine(PathOperation.difference, hostPath, guestPath);
  }

  /// [getHostRect] converts size associated with the current instance
  /// od [SettingsPageListTile] to Rect.
  Rect getHostRect(Size size) => Offset(0.0, 0.0) & size;

  Rect getLocalGuestRect(Size size) {
    //  Get [renderBox] associated with [SettingsPageListTileClipper].
    //  (Used to generate guestRect and localGuestRect.)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Transform guestRect from the global coordinate system relative to the
    //  top left screen corner to a system local to [renderBox], which
    //  represents the current local instance of ListTile.
    return guestRect!.shift(offset);
  }

  /// [getUpperConstructionRect] calculates the Rect required for determining
  /// the [deltax] by which the current instance of [SettingsPageListTile]
  /// is clipped in the horizontal direction when [SettingsPageListTile]
  /// interacts with the top of [localGuestrect].
  Rect getUpperConstructionRect(Rect localGuestRect) {
    //  Construct upperConstructionRect from localGuestRect.
    return Offset(localGuestRect.left,
            localGuestRect.top - localGuestRect.shortestSide) &
        Size(localGuestRect.width, 1.5 * localGuestRect.shortestSide);
  }

  /// [getLowerConstructionRect] calculates the Rect required for determining
  /// the [deltax] by which the current instance of [SettingsPageListTile]
  /// is clipped in the horizontal direction when [SettingsPageListTile]
  /// interacts with the bottom of [localGuestrect].
  Rect getLowerConstructionRect(Rect localGuestRect) {
    //  Construct upperConstructionRect from localGuestRect.
    return Offset(localGuestRect.left,
            localGuestRect.bottom + localGuestRect.shortestSide) &
        Size(localGuestRect.width, - 1.5 * localGuestRect.shortestSide);
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) {
    return true;
  }
}
