//  Import flutter packages.
import 'dart:math' as math;
import 'package:flutter/material.dart';

// Import project-specific files.
import 'package:kar_kam/lib/rect_extension.dart';

/// [SettingsPageListTileClipper] calculates the path to clip against when
/// constructing [SettinsgPageListTile].
///
/// The path generated by [SettingsPageListTileClipper] is calculated from
/// an instance of RRect that has been shortened horizontally in order to
/// account for the presence of guestRect.
class SettingsPageListTileClipper extends CustomClipper<Path> {
  const SettingsPageListTileClipper({
    required this.context,
    required this.guestRect,
    Listenable? reclip,
  }) : super(reclip: reclip);

  /// [guestRect] is the Rect which [SettingsPageListTileClipper] creates
  /// a path to avoid.
  final Rect? guestRect;

  //  Required on order to find the current renderBox.
  final BuildContext context;

  /// Getter for [localGuestRect].
  Rect get localGuestRect {
    //  Get [renderBox] associated with [SettingsPageListTileClipper].
    //  (Used to generate guestRect and localGuestRect.)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Transform guestRect from the global coordinate system relative to the
    //  top left screen corner to a system local to [renderBox], which
    //  represents the current local instance of ListTile.
    return guestRect!.shift(offset);
  }

  /// Getter for [lowerLocalConstructionRect].
  Rect get lowerLocalConstructionRect {
    //  [lowerLocalConstructionRect] is built from [localGuestRect].
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 4.0;
    Rect rect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return rect.shift(Offset(0.0, dy));
  }

  /// Getter for [upperLocalConstructionRect]
  Rect get upperLocalConstructionRect {
    //  [upperLocalConstructionRect] is built from [localGuestRect].
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 4.0;
    Rect rect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return rect.shift(Offset(0.0, -dy));
  }

  @override
  Path getClip(Size size) {
    //  Construct [hostRect] (in this instance the Rect associated with
    //  [SettingsPageListTile] in a coordinate system local to itself).
    Rect hostRect = getHostRect(size);

    //  Set initial value of deltaX to width of localGuestRect. Use getDeltaX
    //  immediately below to modify this value if the conditions are correct.
    double deltaX = 0.0;

    //  Modify deltaX if conditions are correct.
    print(hostRect.center.dy - localGuestRect.center.dy);
    // print(hostRect.bottom - lowerLocalConstructionRect.bottom > 0);
    // print(hostRect.center.dy - localGuestRect.center.dy);
    // print(hostRect.bottom - lowerLocalConstructionRect.bottom);
    if (hostRect.center.dy - localGuestRect.center.dy > 0
        &&
        hostRect.top - lowerLocalConstructionRect.bottom < 0
    ) {
      print('test1');
      // Case where hostRect is below localGuestRect.
      deltaX = getDeltaX(hostRect.top);
    } else if (hostRect.center.dy - localGuestRect.center.dy < 0
        &&
        hostRect.bottom - upperLocalConstructionRect.top > 0
    )
    {
      print('test2');
      // Case where hostRect is above localGuestRect.
      deltaX = getDeltaX(hostRect.bottom);
    }

    // Calculate [relativeOffset] to determine whether to clip left ot right.
    Offset relativeOffset = localGuestRect.center - hostRect.center;

    //  Generate a Path variable representing the boundary of hostRect.
    Path hostPath = Path();
    if (relativeOffset.dx >= 0) {
      //  localGuestRect is to the right of hostRect.
      hostPath
        ..addRRect(RRect.fromRectAndRadius(
            Rect.fromLTRB(hostRect.left, hostRect.top, hostRect.right - deltaX,
                hostRect.bottom),
            Radius.circular(25)));
    } else if (relativeOffset.dx < 0) {
      //  localGuestRect is to the left of hostRect.
      hostPath
        ..addRRect(RRect.fromRectAndRadius(
            Rect.fromLTRB(hostRect.left + deltaX, hostRect.top, hostRect.right,
                hostRect.bottom),
            Radius.circular(25)));
    }
    return hostPath;

    //  Generate a Path variable representing the boundary of guestRect.
    Path guestPath = Path();
    guestPath
      ..addRRect(RRect.fromRectAndRadius(localGuestRect, Radius.circular(15)));

    //  Create the clipPath by subtracting guestPath from hostPath.
    return Path.combine(PathOperation.difference, hostPath, guestPath);
  }

  double getDeltaX(double y) {
    //  Convert guestRect, provided as input to [SettingsPageListTileClipper],
    //  from global coordinates to a coordinate system local to current
    //  instance of [SettingsPageListTile].
    Rect localGuestRect = getLocalGuestRect();

    //  [getUpperLocalConstructionRect], [getLowerLocalConstructionRect]
    //  and [centralLocalConstructionRect] provide construction rectangles
    //  used for calculating deltaX.
    Rect upperLocalConstructionRect = getUpperLocalConstructionRect();
    Rect lowerLocalConstructionRect = getLowerLocalConstructionRect();
    Rect centralLocalConstructionRect = getCentralLocalConstructionRect();

    //  Need to detemine which y-value to pass to getDeltaX. Choose y-value
    //  of top or bottom edge of hostRect depending on whether hostRect.center
    //  below or above localGuestRect.center.

    // print('localGuestRect = $localGuestRect');
    // print('localGuestRect.center = ${localGuestRect.center}');
    // print('upperLocalConstructionRect = $upperLocalConstructionRect');
    // print('centralLocalConstructionRect.center = ${centralLocalConstructionRect.center}');
    // print('lowerLocalConstructionRect = $lowerLocalConstructionRect');
    return 50;
  }

  /// [getHostRect] converts size associated with the current instance
  /// od [SettingsPageListTile] to Rect.
  Rect getHostRect(Size hostSize) => Offset(0.0, 0.0) & hostSize;

  Rect getLocalGuestRect() {
    //  Get [renderBox] associated with [SettingsPageListTileClipper].
    //  (Used to generate guestRect and localGuestRect.)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset(0.0, 0.0));

    //  Transform guestRect from the global coordinate system relative to the
    //  top left screen corner to a system local to [renderBox], which
    //  represents the current local instance of ListTile.
    return guestRect!.shift(offset);
  }

  /// [getCentralLocalConstructionRect] calculates the central Rect used
  /// for determining the [deltax] by which the current instance of
  /// [SettingsPageListTile] is clipped in the horizontal direction
  /// when interacting with the central part of [ButtonArray].
  ///
  /// Note the output Rect could have zero height.
  Rect getCentralLocalConstructionRect() {
    //  [centralLocalConstructionRect] is built from [localGuestRect].
    Rect localGuestRect = getLocalGuestRect();

    Rect centralLocalConstructionRect = localGuestRect.inflateToHeight(
        math.max(0.0, localGuestRect.height - localGuestRect.shortestSide));
    return centralLocalConstructionRect;
  }

  /// [getLowerLocalConstructionRect] calculates the lower Rect used
  /// for determining the [deltax] by which the current instance of
  /// [SettingsPageListTile] is clipped in the horizontal direction
  /// when interacting with the curved path BELOW [ButtonArray].
  Rect getLowerLocalConstructionRect() {
    //  [lowerLocalConstructionRect] is built from [localGuestRect].
    Rect localGuestRect = getLocalGuestRect();
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 4.0;
    Rect lowerLocalConstructionRect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return lowerLocalConstructionRect.shift(Offset(0.0, dy));
  }

  /// [getUpperLocalConstructionRect] calculates the upper Rect used
  /// for determining the [deltax] by which the current instance of
  /// [SettingsPageListTile] is clipped in the horizontal direction
  /// when interacting with the curved path ABOVE [ButtonArray].
  Rect getUpperLocalConstructionRect() {
    //  [upperLocalConstructionRect] is built from [localGuestRect].
    Rect localGuestRect = getLocalGuestRect();
    double width = localGuestRect.width;
    double height = 1.5 * localGuestRect.shortestSide;

    double dy = localGuestRect.height / 2.0 + localGuestRect.shortestSide / 4.0;
    Rect upperLocalConstructionRect = Rect.fromCenter(
      center: localGuestRect.center,
      width: width,
      height: height,
    );
    return upperLocalConstructionRect.shift(Offset(0.0, -dy));
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) {
    return true;
  }
}
