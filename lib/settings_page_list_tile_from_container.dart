//  Import flutter packages.
import 'dart:math' as math;
import 'package:flutter/material.dart';

//  Import project-specific files.
import 'package:kar_kam/lib/data_notifier.dart';
import 'package:kar_kam/lib/rect_extension.dart';

class SettingsPageListTileFromContainer extends StatelessWidget {
  SettingsPageListTileFromContainer({Key? key}) : super(key: key);

  late Rect buttonArrayRect;

  /// Getter for [centralLocalConstructionRect].
  Rect getCentralLocalConstructionRect(Rect localButtonArrayRect){
    Rect rect = localButtonArrayRect;

    //  Inflate [rect] to a new height centered on the original [rect].
    return rect
        .inflateToHeight(math.max(0.0, rect.height - rect.shortestSide));
  }

  /// [getLocalButtonArrayRect] converts [buttonArrayRect] from
  /// global (screen) coordinates to a coordinate system local
  /// to [SettingsPageListTile].
  Rect getLocalButtonArrayRect(Rect buttonArrayRect, BuildContext context) {
    //  Get [renderBox] associated with [SettingsPageListTile].
    //  ([renderBox] is used to generate [localGuestRect] from [guestRect].)
    RenderBox renderBox = context.findRenderObject() as RenderBox;

    //  Get the global offset associated with the top left corner of
    //  [SettingsPageListTile] relative to the top left screen corner.
    Offset offset = renderBox.globalToLocal(Offset.zero);

    //  Transform [guestRect] from the global coordinate system to one that is
    //  local to [renderBox] or the current local instance of ListTile.
    return buttonArrayRect.shift(offset);
  }

  /// [getLowerLocalConstructionRect] generates a construction rect below the
  /// centre of [localButtonArrayRect] to be used for calculating [deltaX].
  Rect getLowerLocalConstructionRect(Rect localButtonArrayRect) {
    //  Inflate [rect] to a new height centered on the original Rect.
    Rect rect = localButtonArrayRect
        .inflateToHeight(1.0 * localButtonArrayRect.shortestSide);

    //  Calculate shift factor and apply to rect.
    double dy = localButtonArrayRect.height / 2.0 +
        rect.height / 2.0 -
        rect.shortestSide / 2.0;
    return rect.shift(Offset(0.0, dy));
  }

  /// Getter for [upperLocalConstructionRect]
  Rect getUpperLocalConstructionRect(Rect localButtonArrayRect) {
    //  Inflate [rect] to a new height centered on original Rect.
    Rect rect = localButtonArrayRect
        .inflateToHeight(1.0 * localButtonArrayRect.shortestSide);

    //  Calculate shift factor and apply to rect.
    double dy = localButtonArrayRect.height / 2.0 +
        rect.height / 2.0 -
        rect.shortestSide / 2.0;
    return rect.shift(Offset(0.0, -dy));
  }

  /// [getDeltaXFromLowerLocalConstructionRect] calculates the amount,
  /// [deltaX], to decrease the width of [SettingsPageListTile] from its
  /// maximum value in order to accommodate [ButtonArray].
  ///
  /// The maximum value of [deltaX] corresponds to when [SettingsPageListTile]
  /// is alongside [ButtonArray], when it takes on its minimum width.
  ///
  /// [deltaX] is a smooth function of [y], the vertical displacement between
  /// the bottom edge of [lowerLocalConstructionRect] and the top edge of
  /// [SettingsPageListTile]. For the purpose of calculating deltaX, the origin
  /// is taken to be the bottom left corner of [lowerLocalConstructionRect].
  ///
  /// The bottom corner follows a path that is made up of a curved, circular
  /// section and a line segment. The line passes through (a,b), the coordinates
  /// of the centre point of [lowerLocalConstructionRect], and is tangent to
  /// the curve at (xCrit, yCrit).
  ///
  /// getDeltaXFromLowerLocalConstructionRect is nullable, and null when
  /// [SettingsPageListTile] does not overlap with [lowerLocalConstructionRect].
  // double? getDeltaXFromLowerLocalConstructionRect(double y) {
  //   //  [r] is the radius of the curved path section.
  //   double r = lowerLocalConstructionRect!.shortestSide / 2.0;
  //
  //   //  ([a], [b]) are the coordinates of the point of symmetry, taken to
  //   //  be the centre of [lowerLocalConstructionRect]. Relative to the
  //   //  bottom left corner of [lowerLocalConstructionRect], [a] and [b] have
  //   //  the values as follows.
  //   double a = lowerLocalConstructionRect!.width / 2.0;
  //   double b = lowerLocalConstructionRect!.height / 2.0;
  //
  //   //  In order to avoid generating complex numbers aa + bb - 2ra must be
  //   //  greater than zero.
  //   assert(a * a + b * b - 2 * r * a >= 0,
  //   'SettingsPageListTileBorder, getDeltaXFromLowerLocalConstructionRect: '
  //       'error, complex number generated by square root.');
  //
  //   //  The negative square root is taken as otherwise, with (a,b) = (2r,r),
  //   //  the positive root implies a vertical line segment with yCrit < 0.
  //   double xCrit =
  //       (a * a + b * b - r * a - b * math.sqrt(a * a + b * b - 2 * r * a)) *
  //           r / (b * b + (a - r) * (a - r));
  //
  //   //  To get yCrit invert the equation of a circle,
  //   //      (x - r)^2 + (y - 0)^2 = r^2.
  //   double yCrit = math.sqrt(r * r - (xCrit - r) * (xCrit - r));
  //
  //   //  Calculate deltaX. A zero [deltaX] corresponds to the default value
  //   //  representing when [SettingsPageListTile] takes its maximum width.
  //   double? deltaX;
  //   if (y < yCrit) {
  //     //  The bottom left corner of [lowerLocalConstructionRect] is the origin
  //     //  of the bounding box.
  //     //
  //     //  (xCrit,yCrit) is the point where the curve joins to the line segment.
  //     //  (r,0) is the centre of the circle. To get deltaX invert
  //     //      (x - r)^2 + (y - 0)^2 = r^2,
  //     //  taking the negative root.
  //     deltaX = r - math.sqrt(r * r - y * y);
  //   } else if (y < 2 * b - yCrit) {
  //     //  The bottom left corner of [lowerLocalConstructionRect] is the origin
  //     //  of the bounding box.
  //     //
  //     //  By symmetry, the line segment joins (xCrit,yCrit) to
  //     //  (2a - xCrit,2b - yCrit). To get the equation for deltaX invert
  //     //      (x - xCrit) / (y - yCrit)
  //     //          = (2a - xCrit - xCrit) / (2b - yCrit - yCrit),
  //     //  which just equates gradients.
  //     deltaX = xCrit + (y - yCrit) * (a - xCrit) / (b - yCrit);
  //   } else if (y < 2 * b) {
  //     //  The bottom left corner of [lowerLocalConstructionRect] is the origin
  //     //  of the bounding box.
  //     //
  //     //  (2a - xCrit,2b - yCrit is the point where the curve joins to the
  //     //  line segment. (2a - r,2b) is the centre of the circle. To get
  //     //  deltaX invert
  //     //      (x - (2a - r))^2 + (y - 2b)^2 = r^2
  //     //  taking the positive root.
  //     deltaX = (2 * a - r) + math.sqrt(r * r - (y - 2 * b) * (y - 2 * b));
  //   } else {
  //     assert(false,
  //     'SettingsPageListTileBorder, getDeltaXFromLowerLocalConstructionRect: '
  //         'error, invalid y-value.');
  //   }
  //   //
  //   return deltaX;
  // }

  @override
  Widget build(BuildContext context) {
    buttonArrayRect =
        DataNotifier.of(context, ValueKey('buttonArrayRect')).data.value;

    //  Build [SettingsPageListTileFromContainer] each time
    //  [SettingsPageContents] is scrolled.
    return ValueListenableBuilder<double>(
      valueListenable:
          DataNotifier.of(context, ValueKey('scrollController')).data,
      builder: (BuildContext context, double value, __) {
        double width = MediaQuery.of(context).size.width;
        double height = 40;

        Rect localButtonArrayRect =
            getLocalButtonArrayRect(buttonArrayRect, context);
        Rect lowerLocalConstructionRect =
            getLowerLocalConstructionRect(buttonArrayRect);
        Rect upperLocalConstructionRect =
            getUpperLocalConstructionRect(buttonArrayRect);

        return Container(
          decoration: BoxDecoration(
            color: Colors.purple,
            borderRadius: BorderRadius.all(
              Radius.circular(12.0),
            ),
          ),
          width: width,
          height: height,
        );
      },
    );
  }
}

// class SettingsPageListTileFromContainer extends StatefulWidget {
//   const SettingsPageListTileFromContainer({
//     Key? key,
//     required this.context,
//   }) : guestRect = const DataNotifier
//         .of(context, const ValueKey('buttonArrayRect'))
//         .data
//         .value,
//         super(key: key);
//
//   final BuildContext context;
//   final Rect? guestRect;
//
//   Rect? getGuestRect(BuildContext context) {
//     return Offset.zero & Size(width, height);
//   }
//
//   @override
//   State<SettingsPageListTileFromContainer> createState() =>
//       _SettingsPageListTileFromContainerState();
// }
//
// class _SettingsPageListTileFromContainerState extends State<SettingsPageListTileFromContainer> {
//   // /// Getter for [localGuestRect].
//   // Rect? get localGuestRect {
//   //   //  Get [renderBox] associated with [SettingsPageListTile].
//   //   //  ([renderBox] is used to generate [localGuestRect] from [guestRect].)
//   //   RenderBox renderBox = context.findRenderObject() as RenderBox;
//   //
//   //   //  Get the global offset associated with the top left corner of
//   //   //  [SettingsPageListTile] relative to the top left screen corner.
//   //   Offset offset = renderBox.globalToLocal(Offset.zero);
//   //
//   //   //  Transform [guestRect] from the global coordinate system to one that is
//   //   //  local to [renderBox] or the current local instance of ListTile.
//   //   return guestRect?.shift(offset);
//   // }
//
//
//   @override
//   Widget build(BuildContext context) {
//     //  Get buttonArrayRect using DataNotifier specified in base_page.dart.
//
//     double width = MediaQuery.of(context).size.width;
//     double height = 40;
//     Rect hostRect = Offset.zero & Size(width, height);
//     print('SettingsPageListTileFromContainer, hostRect = $hostRect');
//     return Container(
//       width: width,
//       height: height,
//       color: Colors.red
//
//     );
//   }
// }
